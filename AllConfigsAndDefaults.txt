# Will try to find a config file in resources with the profile name
# If profile IS NOT set it will try to find a [plugz.xml, plugz.yml, plugz.yaml, plugz.properties] file to set the configs but doesnt care if it does not exist
# If profile IS set than it will try to find a [plugz-PROFILE.xml, plugz-PROFILE.yml, plugz-PROFILE.yaml, plugz-PROFILE.properties] file and will throw an exception if it could not find even one of them.
config.profile=



# Adds a runtime-shutdownhook to the system when startup() is called.
core.shutdownhook.enabled = true



# Will try to find a ILogger implementation by the specified Class-Name.
# If
log.implementation=

# The log level. Default is INFO.
# Can be a one of the following or a number: TRACE(0), DEBUG(1), INFO(2), WARN(3), ERROR(4), NONE(5).
log.level = INFO

# The format for the logging message. Following placeholders can be used:
# Placeholders:
# $MSG -> The actual log message.
# $LVL -> The level at which the log was called. ( logger.info(...) -> INFO )
# $LOG -> The Logger name if present. Can be specified by using the @Logger annotation
# $CLS -> The class name in which the log method was called.
# $MET -> The method name in which the log method was called.
# Formatter:
# Ex. '%15<(Hello World)!'     -> 'Hello World    !'
# Ex. '%20<(Hello World)!'     -> 'Hello World         !'
# Ex. '%20>(Hello World)!'     -> '         Hello World!'
# Ex. '%20|(Hello World)!'     -> '     Hello World    !'
# Ex. '%20|[#](Hello World)!'  -> '#####Hello World####!'
log.format = [$TIME] [%5<($LVL)] [%30>($LOG?{$CLS.$MET})]: $MSG

# The output for the logs. Must implement the IOutput class.
# Default is a standard System.out - implementation of IOutput.
log.out = com.programm.plugz.magic.LoggerDefaultConsoleOut

# Setting package level:
# log.pkg[com.programm.plugz.*] = WARN

# Setting logName level:
# Only this sets the log level to error for all classes annotated with @Logger("MyLoggerName")
# log.name[MyLoggerName] = ERROR



# Maximum worker size so with the default there can be max 5 workers and other tasks will be queued
async.workers.max = 5

# Timeout time after which workers will be killed. With the default they will wait 5 seconds after finishing a task and will look for new tasks.
async.workers.timeout = 2000



# Min pace at which @Scheduled methods will be updated so with the default value they will be updated once a second at fastest
scheduler.min-sleep = 1000



# The refresh rate of fps - debug - values (All debug values that are not encapsulated by DValue)
debugger.sleep.fps = 100

# The sleep time to check if a fps - debug - value must be updated
debugger.sleep.long = 1000



# Specifies if the events should be handled by a separate event - handler - thread.
# If set to false, emitted events will be handled by the caller of the emit method.
events.handler.enabled = false



# Port on which the Server socket should listen
webserv.port = 8080

webserv.client.timeout = 1000

webserv.log.mappings.register = false

webserv.log.requests = false